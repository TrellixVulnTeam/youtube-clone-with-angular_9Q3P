import { EmojiService } from '@ctrl/ngx-emoji-mart/ngx-emoji';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { EmojiFrequentlyService } from './emoji-frequently.service';
export class CategoryComponent {
    constructor(ref, emojiService, frequently) {
        this.ref = ref;
        this.emojiService = emojiService;
        this.frequently = frequently;
        this.emojis = null;
        this.hasStickyPosition = true;
        this.name = '';
        this.perLine = 9;
        this.totalFrequentLines = 4;
        this.recent = [];
        this.custom = [];
        this.hideObsolete = true;
        this.virtualize = false;
        this.virtualizeOffset = 0;
        this.emojiOver = new EventEmitter();
        this.emojiLeave = new EventEmitter();
        this.emojiClick = new EventEmitter();
        this.containerStyles = {};
        this.emojisToDisplay = [];
        this.filteredEmojisSubject = new Subject();
        this.filteredEmojis$ = this.filteredEmojisSubject.asObservable();
        this.labelStyles = {};
        this.labelSpanStyles = {};
        this.margin = 0;
        this.minMargin = 0;
        this.maxMargin = 0;
        this.top = 0;
        this.rows = 0;
    }
    ngOnInit() {
        this.updateRecentEmojis();
        this.emojisToDisplay = this.filterEmojis();
        if (this.noEmojiToDisplay) {
            this.containerStyles = { display: 'none' };
        }
        if (!this.hasStickyPosition) {
            this.labelStyles = { height: 28 };
            // this.labelSpanStyles = { position: 'absolute' };
        }
    }
    ngOnChanges(changes) {
        var _a, _b, _c, _d;
        if (((_b = (_a = changes.emojis) === null || _a === void 0 ? void 0 : _a.currentValue) === null || _b === void 0 ? void 0 : _b.length) !== ((_d = (_c = changes.emojis) === null || _c === void 0 ? void 0 : _c.previousValue) === null || _d === void 0 ? void 0 : _d.length)) {
            this.emojisToDisplay = this.filterEmojis();
            this.ngAfterViewInit();
        }
    }
    ngAfterViewInit() {
        var _a;
        if (!this.virtualize) {
            return;
        }
        const { width } = this.container.nativeElement.getBoundingClientRect();
        const perRow = Math.floor(width / (this.emojiSize + 12));
        this.rows = Math.ceil(this.emojisToDisplay.length / perRow);
        this.containerStyles = Object.assign(Object.assign({}, this.containerStyles), { minHeight: `${this.rows * (this.emojiSize + 12) + 28}px` });
        (_a = this.ref) === null || _a === void 0 ? void 0 : _a.detectChanges();
        this.handleScroll(this.container.nativeElement.parentNode.parentNode.scrollTop);
    }
    get noEmojiToDisplay() {
        return this.emojisToDisplay.length === 0;
    }
    memoizeSize() {
        const parent = this.container.nativeElement.parentNode.parentNode;
        const { top, height } = this.container.nativeElement.getBoundingClientRect();
        const parentTop = parent.getBoundingClientRect().top;
        const labelHeight = this.label.nativeElement.getBoundingClientRect().height;
        this.top = top - parentTop + parent.scrollTop;
        if (height === 0) {
            this.maxMargin = 0;
        }
        else {
            this.maxMargin = height - labelHeight;
        }
    }
    handleScroll(scrollTop) {
        let margin = scrollTop - this.top;
        margin = margin < this.minMargin ? this.minMargin : margin;
        margin = margin > this.maxMargin ? this.maxMargin : margin;
        if (this.virtualize) {
            const { top, height } = this.container.nativeElement.getBoundingClientRect();
            const parentHeight = this.container.nativeElement.parentNode.parentNode.clientHeight;
            if (parentHeight + (parentHeight + this.virtualizeOffset) >= top && -height - (parentHeight + this.virtualizeOffset) <= top) {
                this.filteredEmojisSubject.next(this.emojisToDisplay);
            }
            else {
                this.filteredEmojisSubject.next([]);
            }
        }
        if (margin === this.margin) {
            this.ref.detectChanges();
            return false;
        }
        if (!this.hasStickyPosition) {
            this.label.nativeElement.style.top = `${margin}px`;
        }
        this.margin = margin;
        this.ref.detectChanges();
        return true;
    }
    updateRecentEmojis() {
        if (this.name !== 'Recent') {
            return;
        }
        let frequentlyUsed = this.recent || this.frequently.get(this.perLine, this.totalFrequentLines);
        if (!frequentlyUsed || !frequentlyUsed.length) {
            frequentlyUsed = this.frequently.get(this.perLine, this.totalFrequentLines);
        }
        if (!frequentlyUsed.length) {
            return;
        }
        this.emojis = frequentlyUsed
            .map(id => {
            const emoji = this.custom.filter((e) => e.id === id)[0];
            if (emoji) {
                return emoji;
            }
            return id;
        })
            .filter(id => !!this.emojiService.getData(id));
    }
    updateDisplay(display) {
        this.containerStyles.display = display;
        this.updateRecentEmojis();
        this.ref.detectChanges();
    }
    trackById(index, item) {
        return item;
    }
    filterEmojis() {
        const newEmojis = [];
        for (const emoji of this.emojis || []) {
            if (!emoji) {
                continue;
            }
            const data = this.emojiService.getData(emoji);
            if (!data || (data.obsoletedBy && this.hideObsolete) || (!data.unified && !data.custom)) {
                continue;
            }
            newEmojis.push(emoji);
        }
        return newEmojis;
    }
}
CategoryComponent.decorators = [
    { type: Component, args: [{
                selector: 'emoji-category',
                template: `
    <section
      #container
      class="emoji-mart-category"
      [attr.aria-label]="i18n.categories[id]"
      [class.emoji-mart-no-results]="noEmojiToDisplay"
      [ngStyle]="containerStyles"
    >
      <div class="emoji-mart-category-label" [ngStyle]="labelStyles" [attr.data-name]="name">
        <!-- already labeled by the section aria-label -->
        <span #label [ngStyle]="labelSpanStyles" aria-hidden="true">
          {{ i18n.categories[id] }}
        </span>
      </div>

      <div
        *ngIf="virtualize; else normalRenderTemplate"
      >
        <div *ngIf="filteredEmojis$ | async as filteredEmojis">
          <ngx-emoji
            *ngFor="let emoji of filteredEmojis; trackBy: trackById"
            [emoji]="emoji"
            [size]="emojiSize"
            [skin]="emojiSkin"
            [isNative]="emojiIsNative"
            [set]="emojiSet"
            [sheetSize]="emojiSheetSize"
            [forceSize]="emojiForceSize"
            [tooltip]="emojiTooltip"
            [backgroundImageFn]="emojiBackgroundImageFn"
            [imageUrlFn]="emojiImageUrlFn"
            [hideObsolete]="hideObsolete"
            [useButton]="emojiUseButton"
            (emojiOver)="emojiOver.emit($event)"
            (emojiLeave)="emojiLeave.emit($event)"
            (emojiClick)="emojiClick.emit($event)"
          ></ngx-emoji>
        </div>
      </div>

      <div *ngIf="noEmojiToDisplay">
        <div>
          <ngx-emoji
            [emoji]="notFoundEmoji"
            size="38"
            [skin]="emojiSkin"
            [isNative]="emojiIsNative"
            [set]="emojiSet"
            [sheetSize]="emojiSheetSize"
            [forceSize]="emojiForceSize"
            [tooltip]="emojiTooltip"
            [backgroundImageFn]="emojiBackgroundImageFn"
            [useButton]="emojiUseButton"
          ></ngx-emoji>
        </div>

        <div class="emoji-mart-no-results-label">
          {{ i18n.notfound }}
        </div>
      </div>
    </section>

    <ng-template #normalRenderTemplate>
        <ngx-emoji
          *ngFor="let emoji of emojisToDisplay; trackBy: trackById"
          [emoji]="emoji"
          [size]="emojiSize"
          [skin]="emojiSkin"
          [isNative]="emojiIsNative"
          [set]="emojiSet"
          [sheetSize]="emojiSheetSize"
          [forceSize]="emojiForceSize"
          [tooltip]="emojiTooltip"
          [backgroundImageFn]="emojiBackgroundImageFn"
          [imageUrlFn]="emojiImageUrlFn"
          [hideObsolete]="hideObsolete"
          [useButton]="emojiUseButton"
          (emojiOver)="emojiOver.emit($event)"
          (emojiLeave)="emojiLeave.emit($event)"
          (emojiClick)="emojiClick.emit($event)"
        ></ngx-emoji>
    </ng-template>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false
            },] }
];
CategoryComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: EmojiService },
    { type: EmojiFrequentlyService }
];
CategoryComponent.propDecorators = {
    emojis: [{ type: Input }],
    hasStickyPosition: [{ type: Input }],
    name: [{ type: Input }],
    perLine: [{ type: Input }],
    totalFrequentLines: [{ type: Input }],
    recent: [{ type: Input }],
    custom: [{ type: Input }],
    i18n: [{ type: Input }],
    id: [{ type: Input }],
    hideObsolete: [{ type: Input }],
    notFoundEmoji: [{ type: Input }],
    virtualize: [{ type: Input }],
    virtualizeOffset: [{ type: Input }],
    emojiIsNative: [{ type: Input }],
    emojiSkin: [{ type: Input }],
    emojiSize: [{ type: Input }],
    emojiSet: [{ type: Input }],
    emojiSheetSize: [{ type: Input }],
    emojiForceSize: [{ type: Input }],
    emojiTooltip: [{ type: Input }],
    emojiBackgroundImageFn: [{ type: Input }],
    emojiImageUrlFn: [{ type: Input }],
    emojiUseButton: [{ type: Input }],
    emojiOver: [{ type: Output }],
    emojiLeave: [{ type: Output }],
    emojiClick: [{ type: Output }],
    container: [{ type: ViewChild, args: ['container', { static: true },] }],
    label: [{ type: ViewChild, args: ['label', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,