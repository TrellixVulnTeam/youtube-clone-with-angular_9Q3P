import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { DEFAULT_BACKGROUNDFN, EmojiService } from './emoji.service';
export class EmojiComponent {
    constructor(emojiService) {
        this.emojiService = emojiService;
        this.skin = 1;
        this.set = 'apple';
        this.sheetSize = 64;
        /** Renders the native unicode emoji */
        this.isNative = false;
        this.forceSize = false;
        this.tooltip = false;
        this.size = 24;
        this.emoji = '';
        this.hideObsolete = false;
        this.emojiOver = new EventEmitter();
        this.emojiLeave = new EventEmitter();
        this.emojiClick = new EventEmitter();
        this.title = '';
        this.label = '';
        this.custom = false;
        this.isVisible = true;
        // TODO: replace 4.0.3 w/ dynamic get verison from emoji-datasource in package.json
        this.backgroundImageFn = DEFAULT_BACKGROUNDFN;
    }
    ngOnChanges() {
        var _a;
        if (!this.emoji) {
            return (this.isVisible = false);
        }
        const data = this.getData();
        if (!data) {
            return (this.isVisible = false);
        }
        // const children = this.children;
        this.unified = data.native || null;
        if (data.custom) {
            this.custom = data.custom;
        }
        if (!data.unified && !data.custom) {
            return (this.isVisible = false);
        }
        if (this.tooltip) {
            this.title = data.shortNames[0];
        }
        if (data.obsoletedBy && this.hideObsolete) {
            return (this.isVisible = false);
        }
        this.label = [data.native].concat(data.shortNames).filter(Boolean).join(', ');
        if (this.isNative && data.unified && data.native) {
            // hide older emoji before the split into gendered emoji
            this.style = { fontSize: `${this.size}px` };
            if (this.forceSize) {
                this.style.display = 'inline-block';
                this.style.width = `${this.size}px`;
                this.style.height = `${this.size}px`;
                this.style['word-break'] = 'keep-all';
            }
        }
        else if (data.custom) {
            this.style = {
                width: `${this.size}px`,
                height: `${this.size}px`,
                display: 'inline-block',
            };
            if (data.spriteUrl && this.sheetRows && this.sheetColumns) {
                this.style = Object.assign(Object.assign({}, this.style), { backgroundImage: `url(${data.spriteUrl})`, backgroundSize: `${100 * this.sheetColumns}% ${100 * this.sheetRows}%`, backgroundPosition: this.emojiService.getSpritePosition(data.sheet, this.sheetColumns) });
            }
            else {
                this.style = Object.assign(Object.assign({}, this.style), { backgroundImage: `url(${data.imageUrl})`, backgroundSize: 'contain' });
            }
        }
        else {
            if (data.hidden.length && data.hidden.includes(this.set)) {
                if (this.fallback) {
                    this.style = { fontSize: `${this.size}px` };
                    this.unified = this.fallback(data, this);
                }
                else {
                    return (this.isVisible = false);
                }
            }
            else {
                this.style = this.emojiService.emojiSpriteStyles(data.sheet, this.set, this.size, this.sheetSize, this.sheetRows, this.backgroundImageFn, this.sheetColumns, (_a = this.imageUrlFn) === null || _a === void 0 ? void 0 : _a.call(this, this.getData()));
            }
        }
        return (this.isVisible = true);
    }
    getData() {
        return this.emojiService.getData(this.emoji, this.skin, this.set);
    }
    getSanitizedData() {
        return this.emojiService.getSanitizedData(this.emoji, this.skin, this.set);
    }
    handleClick($event) {
        const emoji = this.getSanitizedData();
        this.emojiClick.emit({ emoji, $event });
    }
    handleOver($event) {
        const emoji = this.getSanitizedData();
        this.emojiOver.emit({ emoji, $event });
    }
    handleLeave($event) {
        const emoji = this.getSanitizedData();
        this.emojiLeave.emit({ emoji, $event });
    }
}
EmojiComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-emoji',
                template: `
    <button
      *ngIf="useButton && isVisible"
      type="button"
      (click)="handleClick($event)"
      (mouseenter)="handleOver($event)"
      (mouseleave)="handleLeave($event)"
      [title]="title"
      [attr.aria-label]="label"
      class="emoji-mart-emoji"
      [class.emoji-mart-emoji-native]="isNative"
      [class.emoji-mart-emoji-custom]="custom"
    >
      <span [ngStyle]="style">
        <ng-template [ngIf]="isNative">{{ unified }}</ng-template>
        <ng-content></ng-content>
      </span>
    </button>

    <span
      *ngIf="!useButton && isVisible"
      (click)="handleClick($event)"
      (mouseenter)="handleOver($event)"
      (mouseleave)="handleLeave($event)"
      [title]="title"
      [attr.aria-label]="label"
      class="emoji-mart-emoji"
      [class.emoji-mart-emoji-native]="isNative"
      [class.emoji-mart-emoji-custom]="custom"
    >
      <span [ngStyle]="style">
        <ng-template [ngIf]="isNative">{{ unified }}</ng-template>
        <ng-content></ng-content>
      </span>
    </span>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false
            },] }
];
EmojiComponent.ctorParameters = () => [
    { type: EmojiService }
];
EmojiComponent.propDecorators = {
    skin: [{ type: Input }],
    set: [{ type: Input }],
    sheetSize: [{ type: Input }],
    isNative: [{ type: Input }],
    forceSize: [{ type: Input }],
    tooltip: [{ type: Input }],
    size: [{ type: Input }],
    emoji: [{ type: Input }],
    fallback: [{ type: Input }],
    hideObsolete: [{ type: Input }],
    sheetRows: [{ type: Input }],
    sheetColumns: [{ type: Input }],
    useButton: [{ type: Input }],
    emojiOver: [{ type: Output }],
    emojiLeave: [{ type: Output }],
    emojiClick: [{ type: Output }],
    backgroundImageFn: [{ type: Input }],
    imageUrlFn: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,